(window.webpackJsonp=window.webpackJsonp||[]).push([[55],{627:function(t,s,a){"use strict";a.r(s);var n=a(9),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("p"),a("div",{staticClass:"table-of-contents"},[a("ul",[a("li",[a("a",{attrs:{href:"#一、-git"}},[t._v("一、 Git")]),a("ul",[a("li",[a("a",{attrs:{href:"#_1-git-的安装"}},[t._v("1. Git 的安装")])]),a("li",[a("a",{attrs:{href:"#_2-git-的配置及-github"}},[t._v("2. Git 的配置及 Github")])]),a("li",[a("a",{attrs:{href:"#_3-git-的常用命令"}},[t._v("3. Git 的常用命令")]),a("ul",[a("li",[a("a",{attrs:{href:"#_1-第一部分"}},[t._v("(1) 第一部分")])]),a("li",[a("a",{attrs:{href:"#_2-第二部分"}},[t._v("(2) 第二部分")])]),a("li",[a("a",{attrs:{href:"#_3-第三部分"}},[t._v("(3) 第三部分")])])])])])]),a("li",[a("a",{attrs:{href:"#二、-svn"}},[t._v("二、 Svn")]),a("ul",[a("li",[a("a",{attrs:{href:"#_1-svn-的安装"}},[t._v("1. Svn 的安装")]),a("ul",[a("li",[a("a",{attrs:{href:"#_1-windows-环境"}},[t._v("(1) Windows 环境")])]),a("li",[a("a",{attrs:{href:"#_2-linux-环境"}},[t._v("(2) Linux 环境")])])])]),a("li",[a("a",{attrs:{href:"#_2-svn-的配置"}},[t._v("2. Svn 的配置")]),a("ul",[a("li",[a("a",{attrs:{href:"#_1-客户端的配置"}},[t._v("(1) 客户端的配置")])]),a("li",[a("a",{attrs:{href:"#_2-服务端的配置"}},[t._v("(2) 服务端的配置")])])])]),a("li",[a("a",{attrs:{href:"#_3-svn-的常用命令"}},[t._v("3. Svn 的常用命令")]),a("ul",[a("li",[a("a",{attrs:{href:"#_1-将文件-checkout-到本地目录"}},[t._v("(1) 将文件 checkout 到本地目录")])]),a("li",[a("a",{attrs:{href:"#_2-往版本库中添加新的文件"}},[t._v("(2) 往版本库中添加新的文件")])]),a("li",[a("a",{attrs:{href:"#_3-将改动的文件提交到版本库"}},[t._v("(3) 将改动的文件提交到版本库")])]),a("li",[a("a",{attrs:{href:"#_4-加锁-解锁"}},[t._v("(4) 加锁 / 解锁")])]),a("li",[a("a",{attrs:{href:"#_5-更新到某个版本"}},[t._v("(5) 更新到某个版本")])]),a("li",[a("a",{attrs:{href:"#_6-查看文件或者目录状态"}},[t._v("(6) 查看文件或者目录状态")])]),a("li",[a("a",{attrs:{href:"#_7-删除文件"}},[t._v("(7) 删除文件")])]),a("li",[a("a",{attrs:{href:"#_8-查看日志"}},[t._v("(8) 查看日志")])]),a("li",[a("a",{attrs:{href:"#_9-查看文件详细信息"}},[t._v("(9) 查看文件详细信息")])]),a("li",[a("a",{attrs:{href:"#_10-比较差异"}},[t._v("(10) 比较差异")])]),a("li",[a("a",{attrs:{href:"#_11-将两个版本之间的差异合并到当前文件"}},[t._v("(11) 将两个版本之间的差异合并到当前文件")])]),a("li",[a("a",{attrs:{href:"#_12-svn-帮助"}},[t._v("(12) SVN 帮助")])]),a("li",[a("a",{attrs:{href:"#_13-版本库下的文件和目录列表"}},[t._v("(13) 版本库下的文件和目录列表")])]),a("li",[a("a",{attrs:{href:"#_14-创建纳入版本控制下的新目录"}},[t._v("(14) 创建纳入版本控制下的新目录")])]),a("li",[a("a",{attrs:{href:"#_15-恢复本地修改"}},[t._v("(15) 恢复本地修改")])]),a("li",[a("a",{attrs:{href:"#_16-代码库-url-变更"}},[t._v("(16) 代码库 URL 变更")])]),a("li",[a("a",{attrs:{href:"#_17-解决冲突"}},[t._v("(17) 解决冲突")])]),a("li",[a("a",{attrs:{href:"#_18-忽略掉某些文件"}},[t._v("(18) 忽略掉某些文件")])])])])])]),a("li",[a("a",{attrs:{href:"#三、-git-与-svn-的比较"}},[t._v("三、 Git 与 Svn 的比较")])]),a("li",[a("a",{attrs:{href:"#四、-结语"}},[t._v("四、 结语")])])])]),a("p"),t._v(" "),a("p",{staticStyle:{"font-size":"18px"}},[t._v("  对于开发者来说，项目的开发最频繁的就是修修补补，改一下这里改一下那里，结构安排得好的话，改错了可能还能改回来，不好的话......，如果保存了下一次开起来可能就忘记改掉哪里了，这时候就需要一个经常帮你备份的，也就是版本管理工具。"),a("br"),t._v("\n   当然这只要是程序员都应该知道的一件事情，而工具里面，最经常用的也就是以下两个了：Git, Svn，而进一步地，用 git 的程序员们又相对比 Svn 多一些。所以今天也既是总结一下两者的用法，也是对两者进行一个比较。")]),t._v(" "),a("h3",{attrs:{id:"一、-git"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一、-git"}},[t._v("#")]),t._v(" 一、 Git")]),t._v(" "),a("h4",{attrs:{id:"_1-git-的安装"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-git-的安装"}},[t._v("#")]),t._v(" 1. Git 的安装")]),t._v(" "),a("p",{staticStyle:{"font-size":"16px"}},[t._v("  关于Git安装，官网已经将其整理得明明白白，自行前往"),a("a",{attrs:{target:"_blank",href:"https://git-scm.com/downloads",rel:"external nofollow"}},[t._v("这里")]),t._v("按照对应系统的版本等，进行下载")]),t._v(" "),a("h4",{attrs:{id:"_2-git-的配置及-github"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-git-的配置及-github"}},[t._v("#")]),t._v(" 2. Git 的配置及 Github")]),t._v(" "),a("p",{staticStyle:{"font-size":"16px"}},[t._v("  对于Git来说，最重要的就是和github的搭配了，包括一系列操作，最常见也是最常用的就是建repository，然后将自己的代码挂到上面开源。"),a("br"),t._v("\n   或者是建立一个 gitbook 或者 github.io，挂载上自己写的东西；前者是类似于 markdown 文件挂到网上查看，后者就是可以成为一个网站（如果你想搞一些小型的类似博客这些展示的，可以采用 github.io 的方法进行，省去了需要服务器的烦恼，缺点就是访问可能没法那么快）。"),a("br"),t._v(" "),a("b",{staticStyle:{color:"green"}},[t._v("常用的配置操作")])]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("$ ssh-keygen -t rsa -C "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"youremail@example.com"')]),t._v("  // 创建SSH Key\n无需设置密码,所以一路回车就好,\n如果顺利会在user下UserName目录中生成一个.ssh目录里面有id_rsa和id_rsa.pub两个文件\nid_rsa是私钥，不能泄露出去，id_rsa.pub是公钥,可以告诉他人还有在github上添加的也是这个公钥\n登陆GitHub，打开“Account settings”，“SSH Keys”页面,点“Add SSH Key”，填上任意Title，在Key文本框里粘贴id_rsa.pub文件的内容\nGitHub允许你添加多个Key。假定你有若干电脑，你一会儿在公司提交，一会儿在家里提交，只要把每台电脑的Key都添加到GitHub，就可以在每台电脑上往GitHub推送了\n\n\n添加远程库\n做全局的配置\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config --global user.name "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"zhangsan"')]),t._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config --global user.email "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"zhangsan@139.com"')]),t._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" remote "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" origin git@github.com:zhangsan/ylez.git // 添加一个远程仓库\n  // "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" origin 就是添加一个远程仓库\n  // git@github.com:zhangsan/ylez.git  是远程仓库的地址\n  // git@github.com 主机的地址  我们可以通过GitLab大家自己的git服务器\n  // zhangsan 是你的用户名\n  // /ylez.git 是你的仓库名\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push -u origin master  // 将本地的master分支推送到远程的master分支中\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push -u origin dev    // 本地切换到dev分支然后将本地的dev分支推送到远程\n\n\n克隆远程仓库到本地\nGit支持多种协议，包括https，但通过ssh支持的原生git协议速度最快。\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" clone git@192.168.0.8:zhangsan/test.git  // 讲一个远程的仓库克隆到本地\n\n")])])]),a("h4",{attrs:{id:"_3-git-的常用命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-git-的常用命令"}},[t._v("#")]),t._v(" 3. Git 的常用命令")]),t._v(" "),a("h5",{attrs:{id:"_1-第一部分"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-第一部分"}},[t._v("#")]),t._v(" (1) 第一部分")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" init  // 初始化一个Git仓库\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" status   // 查看仓库的状态\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(".")]),t._v("   // 将所有修改添加到暂存区\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" *  // Ant风格添加修改\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" *Controller   // 将以Controller结尾的文件的所有修改添加到暂存区\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" Hello*   // 将所有以Hello开头的文件的修改添加到暂存区 例如:HelloWorld.txt,Hello.java,HelloGit.txt "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" Hello?   // 将以Hello开头后面只有一位的文件的修改提交到暂存区 例如:Hello1.txt,HelloA.java 如果是HelloGit.txt或者Hello.java是不会被添加的\n可以多次添加然后在提交\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" commit -m "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"comment"')]),t._v("  // 将暂存区的修改提交到仓库 后面添加上有意义的注视信息\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("diff")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("file")]),t._v("  // 在file被修改了还未提交的时候查看修改的部分"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("和版本库中最新版本的不同 "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("diff")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" difference 不同"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" log  // 查看git的commit信息,每次提交的信息包括注视在内,从最新提交到最久提交\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" log --pretty"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("oneline   // 将commit 信息简化成一行显示\n注意Git的版本号"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("commit "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("id")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("是SHA1值ea34578d5496d7dd233c827ed32a8cd576c5ee85\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" reset --hard HEAD^   // 退回到相对于当前版本的上一个版本 HEAD 表示当前版本\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" reset --hard HEAD^^  // 退回到相对于当前版本的上上一个版本  HEAD 代表当前版本\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" reset --hard HEAD~100 //退回到相对于当前版本的上 "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),t._v(" 个版本去  HEAD 表示当前版本\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" reset --hard "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3628164")]),t._v("  // 退回到指定的版本   这里不需要全部写commit "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("id")]),t._v("  Git 回去自动适配\nGit的版本回退速度非常快，因为Git在内部有个指向当前版本的HEAD指针，当你回退版本的时候，Git仅仅是把HEAD从指向append GPL\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" reflog   // 在退回到旧版本之后可以查看旧版本之前的提交日志\n当我们想从一个旧版本退回到新版本但是我们关闭了shell窗口,不能查看之前的commit id了,就可以通过\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" reflog 查看到之前的版本的commit "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("id")]),t._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" reset --hard "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3628164")]),t._v("\n\n修改只能在被add 到暂存区以后才能被提交\n在file 已经修改还未add的时候\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout --file  // 表示丢弃工作区的修改退回原始状态"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("不包括以及添加到暂存区的修改"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nfile已经修改和添加到了暂存区,还未commit\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" reset HEAD "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("file")]),t._v("   // 丢弃file已经添加到暂存区的修改  HEAD 表示最新版本\n\n\n如果file修改已经提交到本地仓库\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" reset --hard HEAD^   //退回到上一个版本\n\n\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("rm")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("file")]),t._v("  // 从文件系统中删除文件"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Git 中还是有记录"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(",\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" status 的时候Git 会告诉你有一个file 被删除了\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("rm")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("file")]),t._v("  // 从Git版本库中删除文件"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("同时从文件系统中删除文件"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" $ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" status  正常\n\n\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("rm")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("file")]),t._v("  // 从git版本库中删除文件\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" commit -m "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"delete file"')]),t._v(" // 提交删除\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("file")]),t._v("  // 想要从git恢复 会出现:error: pathspec "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'README.txt'")]),t._v(" did not match any file"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" known to git.\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" reset --hard HEAD^  // 恢复到上一个版本 可以恢复文件\n\n\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("rm")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("file")]),t._v("   //在文件系统中删除文件\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("file")]),t._v("  // 由于是通过文件系统删除的所以可以通过checkout恢复\n")])])]),a("h5",{attrs:{id:"_2-第二部分"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-第二部分"}},[t._v("#")]),t._v(" (2) 第二部分")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("每次提交，Git都把它们串成一条时间线，这条时间线就是一个分支\n在Git里，默认有一个主分支，即master分支\nHEAD严格来说不是指向提交，而是指向master，master才是指向提交的，所以，HEAD指向的就是当前分支\nmaster分支是一条线，Git用master指向最新的提交，再用HEAD指向master\n每次提交，master分支都会向前移动一步，这样，随着你不断提交，master分支的线也越来越长\nGit新建了一个指针叫dev，指向master相同的提交，再把HEAD指向dev，就表示当前分支在dev上\n\n\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" branch   // 查看git的所有分支\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" branch dev  // 创建dev分支\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout dev  // 切换到一个已经存在的分支\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout -b dev  // 创建dev分支,并切换到dev分支\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" branch -d dev  // 删除dev分支\n\n\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout master  // 切换到主分支\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" merge dev   // 将dev分支合并到master分支\nUpdating d17efd8"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v("fec145a\nFast-forward\n readme.txt "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" +\n "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("file")]),t._v(" changed, "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" insertion"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("+"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nFast-forward信息，Git告诉我们，这次合并是“快进模式”,就是直接把master指向dev的当前提交，所以合并速度非常快\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" branch -d dev  // 删除dev分支\n")])])]),a("h5",{attrs:{id:"_3-第三部分"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-第三部分"}},[t._v("#")]),t._v(" (3) 第三部分")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("处理冲突\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout -b feature1\nSwitched to a new branch "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'feature1'")]),t._v("\n\n\n修改readme.txt最后一行，改为：\nCreating a new branch is quick AND simple.\n\n\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" readme.txt\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" commit -m "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"AND simple"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("feature1 75a857c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" AND simple\n "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("file")]),t._v(" changed, "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" insertion"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("+"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(", "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" deletion"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("-"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout master\nSwitched to branch "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'master'")]),t._v("\nYour branch is ahead of "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'origin/master'")]),t._v(" by "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" commit.\nGit还会自动提示我们当前master分支比远程的master分支要超前1个提交。\n\n\n在master分支上把readme.txt文件的最后一行改为：\nCreating a new branch is quick "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" simple.\n\n\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" readme.txt\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" commit -m "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"& simple"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("master 400b400"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" simple\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("file")]),t._v(" changed, "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" insertion"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("+"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(", "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" deletion"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("-"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" merge feature1\nAuto-merging readme.txt\nCONFLICT "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("content"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(": Merge conflict "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" readme.txt\nAutomatic merge failed"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" fix conflicts and "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("then")]),t._v(" commit the result.\n\n\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" status\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# On branch master")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Your branch is ahead of 'origin/master' by 2 commits.")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Unmerged paths:")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('#   (use "git add/rm <file>..." as appropriate to mark resolution)')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#       both modified:      readme.txt  // 冲突了")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#")]),t._v("\nno changes added to commit "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("use "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"git add"')]),t._v(" and/or "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"git commit -a"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n\nGit is a distributed version control system.\nGit is "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("free")]),t._v(" software distributed under the GPL.\nGit has a mutable index called stage.\nGit tracks changes of files.\nCreating a new branch is quick AND simple.\n\n\nGit用"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("，"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("，"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("标记出不同分支的内容，我们修改如下后保存：\nCreating a new branch is quick and simple.\n\n\n再提交：\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" readme.txt\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" commit -m "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"conflict fixed"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("master 59bc1cb"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" conflict fixed\n\n\n用带参数的git log也可以看到分支的合并情况:\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" log --graph --pretty"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("oneline --abbrev-commit\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" log --graph --pretty"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("oneline --abbrev-commit\n*   59bc1cb conflict fixed\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" * 75a857c AND simple\n* "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" 400b400 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" simple\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("/\n* fec145a branch "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("test")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\n\n\n删除feature1分支：\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" branch -d feature1\nDeleted branch feature1 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("was 75a857c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(".\n\n\n通常，合并分支时，如果可能，Git会用Fast forward模式，但这种模式下，删除分支后，会丢掉分支信息。\n如果要强制禁用Fast forward模式，Git就会在merge时生成一个新的commit，这样，从分支历史上就可以看出分支信息\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" merge --no-ff -m "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"comment"')]),t._v(" dev  // 准备合并dev分支，请注意--no-ff参数，表示禁用Fast forward\n\n\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" log --graph --pretty"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("oneline --abbrev-commit  //图形化展示分支情况\n*   7825a50 merge with no-ff\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" * "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("6224937")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" merge\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("/\n*   59bc1cb conflict fixed\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\n\n\n修复一个代号101的bug的任务时，很自然地，你想创建一个分支issue-101来修复它\n在修复bug时候,手里还有工作没有完成但是又不能提交可以将进度冻结\n在你当前的工作区"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("分支"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" stash  // 冻结当前的分支修改\n\n\n查看所有的stash\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" stash list  // 列出所有的工作现场存储\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" stash list\nstash@"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(": WIP on dev: "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("6224937")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" merge\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" stash apply "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("stash@"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" // 恢复工作现场"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("只有一个的时候可以省略后面的,如果有多个可以恢复指定的某一个stash"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("但是不删除存储中的stash\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" stash drop "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("stash@"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  // 删除存储的工作现场"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("只有一个的时候可以省略后面的,如果又多个就指定删除某一个"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" stash pop "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("stash@"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  // 恢复的同时把stash内容也删了"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("只有一个的时候可以省略后面的,如果又多个就指定删除某一个"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" branch -d branchName  // 删除某一个分支,前提是在该分支和产生该分支的主分支已经合并了"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("merge"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" branch -D branchName  // 删除某一个分支,无论是否合并都强制删除\n\n\n\n当你从远程仓库克隆时，实际上Git自动把本地的master分支和远程的master分支对应起来了，并且，远程仓库的默认名称是origin。\n\n\n要查看远程库的信息，用git remote：\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" remote\n\n\n或者，用git remote -v显示更详细的信息：\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" remote -v\n\n\n并不是一定要把本地分支往远程推送，那么，哪些分支需要推送，哪些不需要呢？\n  master分支是主分支，因此要时刻与远程同步；\n  dev分支是开发分支，团队所有成员都需要在上面工作，所以也需要与远程同步；\n  bug分支只用于在本地修复bug，就没必要推到远程了，除非老板要看看你每周到底修复了几个bug；\n  feature分支是否推到远程，取决于你是否和你的小伙伴合作在上面开发。\n\n\n推送的时候如果有人在你之前已经推送了,推送失败\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push origin dev\n  To git@github.com:michaelliao/learngit.git\n   "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("rejected"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("        dev -"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" dev "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("non-fast-forward"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  error: failed to push some refs to "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'git@github.com:michaelliao/learngit.git'")]),t._v("\n  hint: Updates were rejected because the tip of your current branch is behind\n  hint: its remote counterpart. Merge the remote changes "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("e.g. "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'git pull'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  hint: before pushing again.\n  hint: See the "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Note about fast-forwards'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'git push --help'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" details.\n因为你的小伙伴的最新提交和你试图推送的提交有冲突，解决办法也很简单，\nGit已经提示我们，先用git pull把最新的提交从origin/dev抓下来，然后，在本地合并，解决冲突，再推送\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" pull  //抓去远程的分支的提交到本地\n\n\n没有指定本地dev分支与远程origin/dev分支的链接,推送也会失败,所以首先我们需要建立本地分支和远程分支的联系\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" branch --set-upstream dev origin/dev  // 建立本地dev 分支和远程dev分支的联系\n\n")])])]),a("p",{staticStyle:{"font-size":"16px","text-align":"center"}},[t._v("参考"),a("a",{attrs:{target:"_blank",href:"https://blog.csdn.net/u012556150/article/details/50736896?depth_1-utm_source=distribute.pc_relevant.none-task&utm_source=distribute.pc_relevant.none-task",rel:"external nofollow"}},[a("b",{staticStyle:{color:"green"}},[t._v("git命令大全（非常齐全）")])])]),t._v(" "),a("hr"),t._v(" "),a("h3",{attrs:{id:"二、-svn"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二、-svn"}},[t._v("#")]),t._v(" 二、 Svn")]),t._v(" "),a("h4",{attrs:{id:"_1-svn-的安装"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-svn-的安装"}},[t._v("#")]),t._v(" 1. Svn 的安装")]),t._v(" "),a("h5",{attrs:{id:"_1-windows-环境"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-windows-环境"}},[t._v("#")]),t._v(" (1) Windows 环境")]),t._v(" "),a("p",{staticStyle:{"font-size":"16px"}},[t._v("  Window环境下，直接点击"),a("a",{attrs:{target:"_blank",href:"https://tortoisesvn.net/downloads.zh.html",rel:"external nofollow"}},[t._v("这里")]),t._v("下载Svn客户端，然后按正常操作安装即可")]),t._v(" "),a("h5",{attrs:{id:"_2-linux-环境"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-linux-环境"}},[t._v("#")]),t._v(" (2) Linux 环境")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("// ubuntu环境下的话直接运行\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("apt-get")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v(" subversion\n")])])]),a("h4",{attrs:{id:"_2-svn-的配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-svn-的配置"}},[t._v("#")]),t._v(" 2. Svn 的配置")]),t._v(" "),a("h5",{attrs:{id:"_1-客户端的配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-客户端的配置"}},[t._v("#")]),t._v(" (1) 客户端的配置")]),t._v(" "),a("p",{staticStyle:{"font-size":"16px"}},[t._v("  这个配置其实没有涉及到很多东西，Windows环境直接右键就看到SVN以插件的形式集成到其中，可直接点开界面进行一些基本的配置。"),a("br"),t._v("\n  Linux 环境则需要记住常见的那几句命令，拉取项目，更新代码，提交代码，添加、删除文件等。")]),t._v(" "),a("h5",{attrs:{id:"_2-服务端的配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-服务端的配置"}},[t._v("#")]),t._v(" (2) 服务端的配置")]),t._v(" "),a("p",{staticStyle:{"font-size":"16px"}},[t._v("  服务端的配置的话一般相对麻烦一点，第一步自然是安装，这里不再赘述")]),t._v(" "),a("h6",{attrs:{id:"_1-安装-svn"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-安装-svn"}},[t._v("#")]),t._v(" ① 安装 SVN")]),t._v(" "),a("h6",{attrs:{id:"_2-在任意目录下-一般是系统目录-linux-为-home-下建立文件夹"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-在任意目录下-一般是系统目录-linux-为-home-下建立文件夹"}},[t._v("#")]),t._v(" ② 在任意目录下（一般是系统目录）(linux 为 home) 下建立文件夹")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("mkdir")]),t._v(" /home/"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("yourportfolioName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" etc: svn\n")])])]),a("h6",{attrs:{id:"_3-创建数据仓库-可以根据需要创建多个"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-创建数据仓库-可以根据需要创建多个"}},[t._v("#")]),t._v(" ③ 创建数据仓库（可以根据需要创建多个）")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("svnadmin create /home/svn/test   （仓库里面可以放很多项目）\n")])])]),a("h6",{attrs:{id:"_4-启动-svn-网络服务"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-启动-svn-网络服务"}},[t._v("#")]),t._v(" ④ 启动 svn 网络服务")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("svnserve -d -r /home/svn    （不要带上版本仓库）\n\n其中 -d 参数让 svnserve 运行在后台，-r 参数限定了数据仓库，在网络上可以访问的地址。\n/home/svn指定svn数据仓库存放的目录位置\n\n\n")])])]),a("h6",{attrs:{id:"_5-设置-svn-方式的访问权限"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-设置-svn-方式的访问权限"}},[t._v("#")]),t._v(" ⑤ 设置 svn: 方式的访问权限")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("在每个数据仓库目录下都有一堆目录，进入 conf 并打开 svnserve.conf 这个文件，找到以下几行，\n 并把前面的注解符号 ‘"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#’ 去掉，注意千万在每行的前面别留任何空格。")]),t._v("\n\nanon-access "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("read")]),t._v(" auth-access "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("write")]),t._v(" password-db "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("passwd")]),t._v("\n\n其中 anon-access 和 auth-access 分别为匿名和有权限用户的权限，默认给匿名用户只读的权限。\n\n但如果想拒绝匿名用户的访问，只需把 anon-access的read 改成 none 就能达到目的。\npassword-db 后的 "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("passwd")]),t._v(" 则为定义用户名及密码的文件路径。这个文件默认跟 snvserve.conf 在\n同一个目录，下面看看怎么配置 passwd文件中的内容。\n\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("user"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# harry = harryssecret # sally = sallyssecret")]),t._v("\nharry 和 sally 这两行分别定义了可以对 repo 进行写入的用户的用户名和密码。我们可以在下面加上\n自己的用户名和密码，比如\n\nzhangsan "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" zhangsan\n\n这样就给了用户 testsvn 往 repo 中写的权限。存盘退出后，svn 服务器就算正式可以运行了！\n\n把所有需要管理的项目都放在 /home/svn这个目录下，像正常那样用 svnadmin create 命令建立数据仓库。\n\n这样就可以使用svn客户端通过 “svn co svn://IP地址/数据仓库目录” 的方式把服务器上的数据仓库拉到本地了。\n\nE000061: Unable to connect to a repository at URL 是svn的端口没有打开，svn的默认端口是3690，\n\n在ubuntu里查看端口打开情况，命令是netstat -anp "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("grep")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3690")]),t._v("，\n\n查看进程的命令：ps -ef "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("grep")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"svn"')]),t._v("\n\n把svn服务重新启动下就可以了，命令为svnserve -d -r /home/svn\n")])])]),a("h6",{attrs:{id:"_6-用-improt-导入工程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-用-improt-导入工程"}},[t._v("#")]),t._v(" ⑥ 用 improt 导入工程")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("命令为：svn "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("import")]),t._v("  /home/username/myproject   svn://192.168.1.1:3690/test/edusoho  -m  "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"我的工程"')]),t._v("\n")])])]),a("h4",{attrs:{id:"_3-svn-的常用命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-svn-的常用命令"}},[t._v("#")]),t._v(" 3. Svn 的常用命令")]),t._v(" "),a("h5",{attrs:{id:"_1-将文件-checkout-到本地目录"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-将文件-checkout-到本地目录"}},[t._v("#")]),t._v(" (1) 将文件 checkout 到本地目录")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("svn checkout path（path是服务器上的目录）\n例如：svn checkout http://ip地址/路径/项目名\n简写：svn co\n")])])]),a("h5",{attrs:{id:"_2-往版本库中添加新的文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-往版本库中添加新的文件"}},[t._v("#")]),t._v(" (2) 往版本库中添加新的文件")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("svn "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("file")]),t._v("\n例如：svn "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" test.php"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("添加test.php"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nsvn "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" *.php"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("添加当前目录下所有的php文件"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n//需要add的都是新文件，如果只是在旧文件上改动不需要add，直接commit即可\n")])])]),a("h5",{attrs:{id:"_3-将改动的文件提交到版本库"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-将改动的文件提交到版本库"}},[t._v("#")]),t._v(" (3) 将改动的文件提交到版本库")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("svn commit -m “LogMessage“ "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("-N"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("--no-unlock"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token environment constant"}},[t._v("PATH")]),t._v("　　　　　　　　"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("如果选择了保持锁，就使用–no-unlock开关"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n例如：\n　　svn commit -m “add "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("test")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("file")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" my test“ test.php\n简写：\n　　svn ci\n//推荐在项目根目录下commit，无需指定是哪个文件，一键上传改动的那些\n")])])]),a("h5",{attrs:{id:"_4-加锁-解锁"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-加锁-解锁"}},[t._v("#")]),t._v(" (4) 加锁 / 解锁")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("svn lock -m “LockMessage“ "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("--force"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token environment constant"}},[t._v("PATH")]),t._v("\n例如：svn lock -m “lock "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("test")]),t._v(" file“ test.php\nsvn unlock "),a("span",{pre:!0,attrs:{class:"token environment constant"}},[t._v("PATH")]),t._v("\n// 不常用\n")])])]),a("h5",{attrs:{id:"_5-更新到某个版本"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-更新到某个版本"}},[t._v("#")]),t._v(" (5) 更新到某个版本")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("svn update -r m path\n例如：\nsvn update如果后面没有目录，默认将当前目录以及子目录下的所有文件都更新到最新版本。\nsvn update -r "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("200")]),t._v(" test.php"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("将版本库中的文件test.php还原到版本200"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nsvn update test.php"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("更新，于版本库同步。如果在提交的时候提示过期的话，是因为冲突，需要先update，修改文件，然后清除svn resolved，最后再提交commit"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n简写：svn up\n//在产生了错误，覆盖了原来版本后，可以使用这个恢复到较近正确的版本\n")])])]),a("h5",{attrs:{id:"_6-查看文件或者目录状态"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-查看文件或者目录状态"}},[t._v("#")]),t._v(" (6) 查看文件或者目录状态")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("svn status path（目录下的文件和子目录的状态，正常状态不显示）\n【?：不在svn的控制中；M：内容被修改；C：发生冲突；A：预定加入到版本库；K：被锁定】\nsvn status -v path"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("显示文件和子目录状态"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n第一列保持相同，第二列显示工作版本号，第三和第四列显示最后一次修改的版本号和修改人。\n注：svn status、svn diff和 svn revert这三条命令在没有网络的情况下也可以执行的，原因是svn在本地的.svn中保留了本地版本的原始拷贝。\n简写：svn st\n")])])]),a("h5",{attrs:{id:"_7-删除文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-删除文件"}},[t._v("#")]),t._v(" (7) 删除文件")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("svn delete path -m “delete "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("test")]),t._v(" fle“\n例如：svn delete svn://192.168.1.1/pro/domain/test.php -m “delete "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("test")]),t._v(" file”\n或者直接svn delete test.php 然后再svn ci -m ‘delete "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("test")]),t._v(" file‘，推荐使用这种\n简写：svn "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("del, remove, "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("rm")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n//推荐删除文件时用svn删，手动删除的话只是本地删除，远程没删除的话容易导致下次拉取时出错\n")])])]),a("h5",{attrs:{id:"_8-查看日志"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_8-查看日志"}},[t._v("#")]),t._v(" (8) 查看日志")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("svn log path\n例如：svn log test.php 显示这个文件的所有修改记录，及其版本号的变化\n")])])]),a("h5",{attrs:{id:"_9-查看文件详细信息"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_9-查看文件详细信息"}},[t._v("#")]),t._v(" (9) 查看文件详细信息")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("svn info path\n例如：svn info test.php\n")])])]),a("h5",{attrs:{id:"_10-比较差异"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_10-比较差异"}},[t._v("#")]),t._v(" (10) 比较差异")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("svn "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("diff")]),t._v(" path"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("将修改的文件与基础版本比较"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n例如：svn "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("diff")]),t._v(" test.php\nsvn "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("diff")]),t._v(" -r m:n path"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("对版本m和版本n比较差异"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n例如：svn "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("diff")]),t._v(" -r "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("200")]),t._v(":201 test.php\n简写：svn di\n")])])]),a("h5",{attrs:{id:"_11-将两个版本之间的差异合并到当前文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_11-将两个版本之间的差异合并到当前文件"}},[t._v("#")]),t._v(" (11) 将两个版本之间的差异合并到当前文件")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("svn merge -r m:n path\n例如：svn merge -r "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("200")]),t._v(":205 test.php（将版本200与205之间的差异合并到当前文件，但是一般都会产生冲突，需要处理一下）\n")])])]),a("h5",{attrs:{id:"_12-svn-帮助"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_12-svn-帮助"}},[t._v("#")]),t._v(" (12) SVN 帮助")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("svn "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("help")]),t._v("\nsvn "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("help")]),t._v(" ci\n")])])]),a("h5",{attrs:{id:"_13-版本库下的文件和目录列表"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_13-版本库下的文件和目录列表"}},[t._v("#")]),t._v(" (13) 版本库下的文件和目录列表")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("svn list path\n显示path目录下的所有属于版本库的文件和目录\n简写：svn "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("ls")]),t._v("\n")])])]),a("h5",{attrs:{id:"_14-创建纳入版本控制下的新目录"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_14-创建纳入版本控制下的新目录"}},[t._v("#")]),t._v(" (14) 创建纳入版本控制下的新目录")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("svn mkdir: 创建纳入版本控制下的新目录。\n用法: "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("mkdir")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token environment constant"}},[t._v("PATH")]),t._v("…\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("mkdir")]),t._v(" URL…\n创建版本控制的目录。\n每一个以工作副本 "),a("span",{pre:!0,attrs:{class:"token environment constant"}},[t._v("PATH")]),t._v(" 指定的目录，都会创建在本地端，并且加入新增\n调度，以待下一次的提交。\n每个以URL指定的目录，都会透过立即提交于仓库中创建。\n在这两个情况下，所有的中间目录都必须事先存在\n")])])]),a("h5",{attrs:{id:"_15-恢复本地修改"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_15-恢复本地修改"}},[t._v("#")]),t._v(" (15) 恢复本地修改")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("svn revert: 恢复原始未改变的工作副本文件 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("恢复大部份的本地修改"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("。revert:\n用法: revert "),a("span",{pre:!0,attrs:{class:"token environment constant"}},[t._v("PATH")]),t._v("…\n注意: 本子命令不会存取网络，并且会解除冲突的状况。但是它不会恢复\n被删除的目录\n")])])]),a("h5",{attrs:{id:"_16-代码库-url-变更"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_16-代码库-url-变更"}},[t._v("#")]),t._v(" (16) 代码库 URL 变更")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("svn switch "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sw"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(": 更新工作副本至不同的URL。\n用法: "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("、switch URL "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token environment constant"}},[t._v("PATH")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("、switch –relocate FROM TO "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token environment constant"}},[t._v("PATH")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v("."),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("、更新你的工作副本，映射到一个新的URL，其行为跟“svn update”很像，也会将\n   服务器上文件与本地文件合并。这是将工作副本对应到同一仓库中某个分支或者标记的\n   方法。\n "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("、改写工作副本的URL元数据，以反映单纯的URL上的改变。当仓库的根URL变动\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("比如方案名或是主机名称变动"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("，但是工作副本仍旧对映到同一仓库的同一目录时使用\n  这个命令更新工作副本与仓库的对应关系。\n")])])]),a("h5",{attrs:{id:"_17-解决冲突"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_17-解决冲突"}},[t._v("#")]),t._v(" (17) 解决冲突")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("svn resolved: 移除工作副本的目录或文件的“冲突”状态。\n用法: resolved "),a("span",{pre:!0,attrs:{class:"token environment constant"}},[t._v("PATH")]),t._v("…\n注意: 本子命令不会依语法来解决冲突或是移除冲突标记；它只是移除冲突的\n相关文件，然后让 "),a("span",{pre:!0,attrs:{class:"token environment constant"}},[t._v("PATH")]),t._v(" 可以再次提交\n")])])]),a("h5",{attrs:{id:"_18-忽略掉某些文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_18-忽略掉某些文件"}},[t._v("#")]),t._v(" (18) 忽略掉某些文件")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("svn propset svn:ignore node_modules "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(".")]),t._v("\n\n用法：在根目录下失手使用svn "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" * 后的补救措施，忽略掉node_modules文件夹\n注意：语句最后的点不能省略，文件夹目录不能加斜杠\n")])])]),a("p",{staticStyle:{"font-size":"16px","text-align":"center"}},[t._v("参考"),a("a",{attrs:{target:"_blank",href:"https://blog.csdn.net/shixin_0125/article/details/79692733",rel:"external nofollow"}},[a("b",{staticStyle:{color:"green"}},[t._v("svn常用命令集合")])]),t._v("，至于Windows用户还是用界面操作，不用记那么多命令吧。")]),t._v(" "),a("hr"),t._v(" "),a("h3",{attrs:{id:"三、-git-与-svn-的比较"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三、-git-与-svn-的比较"}},[t._v("#")]),t._v(" 三、 Git 与 Svn 的比较")]),t._v(" "),a("p",{staticStyle:{"font-size":"16px"}},[t._v("  本人水平有限，使用这两个工具时间也还不够长，尤其是在实际接触开发用的还是SVN比较多，无法很好的评判两个工具之间的优缺点。这里找到了一个较为详细的分析，也是比较完整的。"),a("br"),t._v("\n     详情请参考"),a("a",{attrs:{href:"https://www.cnblogs.com/Sungeek/p/9152223.html",target:"_blank",rel:"external nofollow"}},[a("b",{staticStyle:{color:"#0cc"}},[t._v("SVN 与 Git 比较的优缺点差异")])])]),t._v(" "),a("hr"),t._v(" "),a("h3",{attrs:{id:"四、-结语"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#四、-结语"}},[t._v("#")]),t._v(" 四、 结语")]),t._v(" "),a("p",{staticStyle:{"font-size":"16px",color:"green"}},[t._v("  写这篇文章的初衷，即是能帮助像我一样对这两个工具不熟悉的人尽快上手，能更好的适应项目开发，将项目的版本更好的进行管理，减少因版本管理的问题导致的做无用功，重复的工作。"),a("br"),t._v("\n   内容也比较多和长，如果本篇文章对你有帮助，请转发给更多的人儿，谢谢。")]),t._v(" "),a("hr")])}),[],!1,null,null,null);s.default=e.exports}}]);