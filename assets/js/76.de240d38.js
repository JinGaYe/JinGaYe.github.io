(window.webpackJsonp=window.webpackJsonp||[]).push([[76],{650:function(a,e,t){"use strict";t.r(e);var s=t(9),r=Object(s.a)({},(function(){var a=this,e=a.$createElement,t=a._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("p"),t("div",{staticClass:"table-of-contents"},[t("ul",[t("li",[t("a",{attrs:{href:"#_1-webpack-与-grunt、gulp-的不同"}},[a._v("1. webpack 与 grunt、gulp 的不同？")])]),t("li",[t("a",{attrs:{href:"#_2-与-webpack-类似的工具还有哪些-谈谈你为什么最终选择-或放弃-使用-webpack"}},[a._v("2. 与 webpack 类似的工具还有哪些？谈谈你为什么最终选择(或放弃)使用 webpack？")])]),t("li",[t("a",{attrs:{href:"#_3-有哪些常见的-loader-他们是解决什么问题的"}},[a._v("3. 有哪些常见的 Loader？他们是解决什么问题的？")])]),t("li",[t("a",{attrs:{href:"#_4-有哪些常见的-plugin-他们是解决什么问题的"}},[a._v("4. 有哪些常见的 Plugin？他们是解决什么问题的？")])]),t("li",[t("a",{attrs:{href:"#_5-loader-和-plugin-的不同"}},[a._v("5. Loader 和 Plugin 的不同？")])]),t("li",[t("a",{attrs:{href:"#_6-webpack-的构建流程是什么-从读取配置到输出文件这个过程尽量说全"}},[a._v("6. webpack 的构建流程是什么?从读取配置到输出文件这个过程尽量说全")])]),t("li",[t("a",{attrs:{href:"#_7-是否写过-loader-和-plugin-描述一下编写-loader-或-plugin-的思路"}},[a._v("7. 是否写过 Loader 和 Plugin？描述一下编写 loader 或 plugin 的思路？")])]),t("li",[t("a",{attrs:{href:"#_8-webpack-的热更新是如何做到的-说明其原理"}},[a._v("8. webpack 的热更新是如何做到的？说明其原理？")])]),t("li",[t("a",{attrs:{href:"#_9-如何利用-webpack-来优化前端性能-提高性能和体验"}},[a._v("9. 如何利用 webpack 来优化前端性能？（提高性能和体验）")])]),t("li",[t("a",{attrs:{href:"#_10-如何提高-webpack-的构建速度"}},[a._v("10. 如何提高 webpack 的构建速度？")])]),t("li",[t("a",{attrs:{href:"#_11-怎么配置单页应用-怎么配置多页应用"}},[a._v("11. 怎么配置单页应用？怎么配置多页应用？")])]),t("li",[t("a",{attrs:{href:"#_12-npm-打包时需要注意哪些-如何利用-webpack-来更好的构建"}},[a._v("12. npm 打包时需要注意哪些？如何利用 webpack 来更好的构建？")])]),t("li",[t("a",{attrs:{href:"#_13-如何在-vue-项目中实现按需加载"}},[a._v("13. 如何在 vue 项目中实现按需加载？")])])])]),t("p"),a._v(" "),t("h4",{attrs:{id:"_1-webpack-与-grunt、gulp-的不同"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-webpack-与-grunt、gulp-的不同"}},[a._v("#")]),a._v(" 1. webpack 与 grunt、gulp 的不同？")]),a._v(" "),t("ul",[t("li",[t("p",[a._v("三者都是前端构建工具，grunt 和 gulp 在早期比较流行，现在 webpack 相对来说比较主流，不过一些轻量化的任务还是会用 gulp 来处理，比如单独打包 css 文件等。")])]),a._v(" "),t("li",[t("p",[a._v("grunt 和 gulp 是基于任务和流(Task、Stream)的。类似 jquery，找到一个(或一类)文件，对其做一系列链式操作，更新流上的数据，整条链式操作构成了一个任务，多个任务就构成了整个 web 的构建流程。")])]),a._v(" "),t("li",[t("p",[a._v("webpack 是基于入口的。webpack 会自动地递归解析入口所需要加载的所有资源文件，然后用不同的 Loader 来处理不同的文件，用 Plugin 来扩展 webpack 功能。")])]),a._v(" "),t("li",[t("p",[a._v("所以总结一下：")]),a._v(" "),t("ul",[t("li",[t("p",[a._v("从构建思路来说"),t("br"),a._v(" "),t("code",[a._v("gulp和grunt需要开发者将整个前端构建过程拆分成多个'Task'，并合理控制所有'Task'的调用关系webpack需要开发者找到入口，并需要清楚对于不同的资源应该使用什么Loader做何种解析和加工")])])]),a._v(" "),t("li",[t("p",[a._v("对于知识背景来说")]),a._v(" "),t("ul",[t("li",[a._v("gulp 更像后端开发者的思路，需要对于整个流程了如指掌 webpack 更倾向于前端开发者的思路")])])])])])]),a._v(" "),t("hr"),a._v(" "),t("h4",{attrs:{id:"_2-与-webpack-类似的工具还有哪些-谈谈你为什么最终选择-或放弃-使用-webpack"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-与-webpack-类似的工具还有哪些-谈谈你为什么最终选择-或放弃-使用-webpack"}},[a._v("#")]),a._v(" 2. 与 webpack 类似的工具还有哪些？谈谈你为什么最终选择(或放弃)使用 webpack？")]),a._v(" "),t("ul",[t("li",[a._v("同样是基于入口的打包工具还有以下几个主流的：\n"),t("ul",[t("li",[a._v("webpack")]),a._v(" "),t("li",[t("a",{attrs:{href:"https://rollupjs.org/",target:"_blank",rel:"noopener noreferrer"}},[a._v("rollup"),t("OutboundLink")],1)]),a._v(" "),t("li",[t("a",{attrs:{href:"https://parceljs.org/",target:"_blank",rel:"noopener noreferrer"}},[a._v("parcel"),t("OutboundLink")],1)])])])]),a._v(" "),t("p",[t("strong",[a._v("从应用场景上来看：")])]),a._v(" "),t("ul",[t("li",[a._v("webpack 适用于大型复杂的前端站点构建")]),a._v(" "),t("li",[a._v("rollup 适用于基础库的打包，如 vue、react")]),a._v(" "),t("li",[a._v("parcel 适用于简单的实验性项目，他可以满足低门槛的快速看到效果")])]),a._v(" "),t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"custom-block-title"},[a._v("提示")]),a._v(" "),t("p",[a._v("由于 parcel 在打包过程中给出的调试信息十分有限，所以一旦打包出错难以调试，所以不建议复杂的项目使用 parcel")])]),a._v(" "),t("hr"),a._v(" "),t("h4",{attrs:{id:"_3-有哪些常见的-loader-他们是解决什么问题的"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-有哪些常见的-loader-他们是解决什么问题的"}},[a._v("#")]),a._v(" 3. 有哪些常见的 Loader？他们是解决什么问题的？")]),a._v(" "),t("ul",[t("li",[a._v("file-loader：把文件输出到一个文件夹中，在代码中通过相对 URL 去引用输出的文件")]),a._v(" "),t("li",[a._v("url-loader：和 file-loader 类似，但是能在文件很小的情况下以 base64 的方式把文件内容注入到代码中去")]),a._v(" "),t("li",[a._v("source-map-loader：加载额外的 Source Map 文件，以方便断点调试")]),a._v(" "),t("li",[a._v("image-loader：加载并且压缩图片文件")]),a._v(" "),t("li",[a._v("babel-loader：把 ES6 转换成 ES5")]),a._v(" "),t("li",[a._v("css-loader：加载 CSS，支持模块化、压缩、文件导入等特性")]),a._v(" "),t("li",[a._v("style-loader：把 CSS 代码注入到 JavaScript 中，通过 DOM 操作去加载 CSS")]),a._v(" "),t("li",[a._v("eslint-loader：通过 ESLint 检查 JavaScript 代码")])]),a._v(" "),t("hr"),a._v(" "),t("h4",{attrs:{id:"_4-有哪些常见的-plugin-他们是解决什么问题的"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-有哪些常见的-plugin-他们是解决什么问题的"}},[a._v("#")]),a._v(" 4. 有哪些常见的 Plugin？他们是解决什么问题的？")]),a._v(" "),t("ul",[t("li",[a._v("define-plugin：定义环境变量")]),a._v(" "),t("li",[a._v("commons-chunk-plugin：提取公共代码")]),a._v(" "),t("li",[a._v("uglifyjs-webpack-plugin：通过"),t("code",[a._v("UglifyES")]),a._v("压缩"),t("code",[a._v("ES6")]),a._v("代码")])]),a._v(" "),t("hr"),a._v(" "),t("h4",{attrs:{id:"_5-loader-和-plugin-的不同"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-loader-和-plugin-的不同"}},[a._v("#")]),a._v(" 5. Loader 和 Plugin 的不同？")]),a._v(" "),t("p",[t("strong",[a._v("不同的作用")])]),a._v(" "),t("ul",[t("li",[t("strong",[a._v("Loader")]),a._v(' 直译为"加载器"。Webpack 将一切文件视为模块，但是 webpack 原生是只能解析 js 文件，如果想将其他文件也打包的话，就会用到'),t("code",[a._v("loader")]),a._v("。所以 Loader 的作用是让 webpack 拥有了加载和解析非 JavaScript 文件的能力。")]),a._v(" "),t("li",[t("strong",[a._v("Plugin")]),a._v(' 直译为"插件"。Plugin 可以扩展 webpack 的功能，让 webpack 具有更多的灵活性。在 Webpack 运行的生命周期中会广播出许多事件，Plugin 可以监听这些事件，在合适的时机通过 Webpack 提供的 API 改变输出结果。')])]),a._v(" "),t("p",[t("strong",[a._v("不同的用法")])]),a._v(" "),t("ul",[t("li",[t("strong",[a._v("Loader")]),a._v("在"),t("code",[a._v("module.rules")]),a._v("中配置，也就是说他作为模块的解析规则而存在。类型为数组，每一项都是一个"),t("code",[a._v("Object")]),a._v("，里面描述了对于什么类型的文件("),t("code",[a._v("test")]),a._v(")，使用什么加载("),t("code",[a._v("loader")]),a._v(")和使用的参数("),t("code",[a._v("options")]),a._v(")")]),a._v(" "),t("li",[t("strong",[a._v("Plugin")]),a._v("在"),t("code",[a._v("plugins")]),a._v("中单独配置。类型为数组，每一项是一个"),t("code",[a._v("plugin")]),a._v("的实例，参数都通过构造函数传入。")])]),a._v(" "),t("hr"),a._v(" "),t("h4",{attrs:{id:"_6-webpack-的构建流程是什么-从读取配置到输出文件这个过程尽量说全"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-webpack-的构建流程是什么-从读取配置到输出文件这个过程尽量说全"}},[a._v("#")]),a._v(" 6. webpack 的构建流程是什么?从读取配置到输出文件这个过程尽量说全")]),a._v(" "),t("ul",[t("li",[a._v("Webpack 的运行流程是一个串行的过程，从启动到结束会一次执行以下流程：")])]),a._v(" "),t("ol",[t("li",[a._v("初始化参数：从配置文件和 Shell 语句中读取与合并参数，得出最终的参数。")]),a._v(" "),t("li",[a._v("开始编译：用上一步得到的参数初始化 Compiler 对象，加载所有配置的插件，执行对象的 run 方法开始执行编译；")]),a._v(" "),t("li",[a._v("确定入口：根据配置中的 entry 找出所有的入口文件；")]),a._v(" "),t("li",[a._v("编译模块：从入口文件出发，调用所有配置的 Loader 对模块进行编译，再找出该模块依赖的模块，再递归本步骤直到所有入口依赖的文件都经过了本步骤的处理；")]),a._v(" "),t("li",[a._v("完成模块编译：在经过第 4 步使用 Loader 翻译完所有模块后，得到了每个模块被翻译后的最终内容以及它们之间的依赖关系；")]),a._v(" "),t("li",[a._v("输出资源：根据入口和模块之间的依赖关系，组装成一个个包含多个模块的 Chunk，再把每个 Chunk 转换成一个单独的文件加入到输出列表，这步是可以修改输出内容的最后机会。")]),a._v(" "),t("li",[a._v("输出完成：在确定号输出内容后，根据配置确定输出的路径和文件名，把文件内容写入到文件系统。")])]),a._v(" "),t("ul",[t("li",[a._v("在以上过程中，Webpack 会在特定的时间点广播出特定的事件，插件在监听到感兴趣的事件后会执行特定的逻辑，并且插件可以调用 Webpack 提供的 API 改变 Webpack 的运行结果。")])]),a._v(" "),t("hr"),a._v(" "),t("h4",{attrs:{id:"_7-是否写过-loader-和-plugin-描述一下编写-loader-或-plugin-的思路"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7-是否写过-loader-和-plugin-描述一下编写-loader-或-plugin-的思路"}},[a._v("#")]),a._v(" 7. 是否写过 Loader 和 Plugin？描述一下编写 loader 或 plugin 的思路？")]),a._v(" "),t("ul",[t("li",[t("p",[a._v('Loader 像一个"翻译官"把读到的源文件内容转义成新的文件内容，并且每个 Loader 通过链式操作，将源文件一步步翻译成想要的样子。')])]),a._v(" "),t("li",[t("p",[a._v('编写 Loader 时要遵循单一原则，每个 Loader 只做一种"转义"工作。每个 Loader 的拿到的是源文件内容('),t("code",[a._v("source")]),a._v(")，可以通过返回值的方式将处理后的内容输出，也可以调用"),t("code",[a._v("this.callback()")]),a._v("方法，将内容返回给 webpack。还可以通过"),t("code",[a._v("this.async()")]),a._v("生成一个"),t("code",[a._v("callback")]),a._v("函数，再用这个 callback 将处理后的内容输出出去。此外"),t("code",[a._v("webpack")]),a._v("还为开发者准备了开发 loader 的工具函数集——"),t("code",[a._v("loader-utils")]),a._v("。")])]),a._v(" "),t("li",[t("p",[a._v("相对于 Loader 而言，Plugin 的编写就灵活了许多。webpack 在运行的生命周期中会广播出许多事件，Plugin 可以监听这些事件，在合适的时机通过 Webpack 提供的 API 改变输出结果。")])])]),a._v(" "),t("hr"),a._v(" "),t("h4",{attrs:{id:"_8-webpack-的热更新是如何做到的-说明其原理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_8-webpack-的热更新是如何做到的-说明其原理"}},[a._v("#")]),a._v(" 8. webpack 的热更新是如何做到的？说明其原理？")]),a._v(" "),t("ul",[t("li",[a._v("webpack 的热更新又称热替换(Hot Module Replacement)，缩写为 HMR。这个机制可以做到不用刷新浏览器而将新变更的模块替换掉旧的模块。")])]),a._v(" "),t("p",[t("strong",[a._v("原理：")]),a._v(" "),t("br"),a._v(" "),t("img",{attrs:{src:"https://pic3.zhimg.com/80/v2-40ff7f2e518e4b4695777d5160a3406e_720w.jpg",alt:"原理"}})]),a._v(" "),t("ul",[t("li",[a._v("首先要知道 server 端和 client 端都做了处理工作")])]),a._v(" "),t("ol",[t("li",[a._v("第一步，在 webpack 的 watch 模式下，文件系统某一个文件发生修改，webpack 监听到文件变化，根据配置文件对模块更新编译打包，并将打包后的代码通过简单的 JavaScript 对象保存在内存中。")]),a._v(" "),t("li",[a._v("第二步是 webpack-dev-server 和 webpack 之间的接口交互，而在这一步，主要是 dev-server 的中间件 webpack-dev-middleware 和 webpack 之间的交互，webpack-dev-middleware 调用 webpack 暴露的 API 对代码变化进行监控，并且告诉 webpack，将代码打包到内存中。")]),a._v(" "),t("li",[a._v("第三步是 webpack-dev-server 对文件变化的一个监控，这一步不同于第一步，并不是监控代码变化重新打包。当我们在配置文件中配置了 devServer.watchContentBase 为 true 的时候，Server 会监听这些配置文件夹中静态文件的变化，变化后会通知浏览器端对应用进行 live reload。注意，这儿是浏览器刷新，和 HMR 是两个概念。")]),a._v(" "),t("li",[a._v("第四步也是 webpack-dev-server 代码的工作，该步骤主要是通过 sockjs(webpack-dev-server 的依赖)在浏览器端和服务端之间建立一个 websocket 长链接，将 webpack 编译打包的各个阶段的状态信息告知浏览器端，同时也包括第三步中 Server 监听静态文件变化的信息。浏览器端根据这些 socket 消息进行不同的操作。当然服务端传递的最主要信息还是新模块的 hash 值，后面的步骤根据这一 hash 值来进行模块热替换。")]),a._v(" "),t("li",[a._v("webpack-dev-server/client 端并不能够请求更新的代码，也不会执行热更模块操作，而把这些工作又交回给了 webpack，webpack/hot/dev-server 的工作就是根据 webpack-dev-server/client 传给它的信息以及 dev-server 的配置决定是刷新浏览器呢还是进行模块热更新。当然如果仅仅是刷新浏览器，也就没有后面那些步骤了。")]),a._v(" "),t("li",[a._v("HotModuleReplacement.runtime 是客户端 HMR 的中枢，它接收到上一步传递给他的新模块的 hash 值，它通过 JsonpMainTemplate.runtime 向 server 端发送 Ajax 请求，服务端返回一个 json，该 json 包含了所有要更新的模块的 hash 值，获取到更新列表后，该模块再次通过 jsonp 请求，获取到最新的模块代码。这就是上图中 7、8、9 步骤。")]),a._v(" "),t("li",[a._v("而第 10 步是决定 HMR 成功与否的关键步骤，在该步骤中，HotModulePlugin 将会对新旧模块进行对比，决定是否更新模块，在决定更新模块后，检查模块之间的依赖关系，更新模块的同时更新模块间的依赖引用。")]),a._v(" "),t("li",[a._v("最后一步，当 HMR 失败后，回退到 live reload 操作，也就是进行浏览器刷新来获取最新打包代码。")])]),a._v(" "),t("hr"),a._v(" "),t("h4",{attrs:{id:"_9-如何利用-webpack-来优化前端性能-提高性能和体验"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_9-如何利用-webpack-来优化前端性能-提高性能和体验"}},[a._v("#")]),a._v(" 9. 如何利用 webpack 来优化前端性能？（提高性能和体验）")]),a._v(" "),t("ul",[t("li",[t("p",[a._v("用 webpack 优化前端性能是指优化 webpack 的输出结果，让打包的最终结果在浏览器运行快速高效。")]),a._v(" "),t("ul",[t("li",[a._v("压缩代码。删除多余的代码、注释、简化代码的写法等等方式。可以利用 webpack 的"),t("code",[a._v("UglifyJSPlugin")]),a._v("和"),t("code",[a._v("ParallelUglifyPlugin")]),a._v("来压缩 JS 文件，利用"),t("code",[a._v("cssnano")]),a._v("(css-loader?minimize)来压缩 css")]),a._v(" "),t("li",[a._v("利用 CDN 加速。在构建过程中，将引用的静态资源路径修改为 CDN 上对应的路径。可以利用 webpack 对于"),t("code",[a._v("output")]),a._v("参数和各 loader 的"),t("code",[a._v("publicPath")]),a._v("参数来修改资源路径")]),a._v(" "),t("li",[a._v("删除死代码（Tree Shaking）。将代码中永远不会走到的片段删除掉。可以通过在启动 webpack 时追加参数"),t("code",[a._v("--optimize-minimize")]),a._v("来实现")]),a._v(" "),t("li",[a._v("提取公共代码")])]),a._v(" "),t("hr"),a._v(" "),t("h4",{attrs:{id:"_10-如何提高-webpack-的构建速度"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_10-如何提高-webpack-的构建速度"}},[a._v("#")]),a._v(" 10. 如何提高 webpack 的构建速度？")])])]),a._v(" "),t("ol",[t("li",[a._v("多入口情况下，使用"),t("code",[a._v("CommonsChunkPlugin")]),a._v("来提取公共代码")]),a._v(" "),t("li",[a._v("通过"),t("code",[a._v("externals")]),a._v("配置来提取常用库")]),a._v(" "),t("li",[a._v("利用"),t("code",[a._v("DllPlugin")]),a._v("和"),t("code",[a._v("DllReferencePlugin")]),a._v("预编译资源模块 通过"),t("code",[a._v("DllPlugin")]),a._v("来对那些我们引用但是绝对不会修改的 npm 包来进行预编译，再通过"),t("code",[a._v("DllReferencePlugin")]),a._v("将预编译的模块加载进来。")]),a._v(" "),t("li",[a._v("使用"),t("code",[a._v("Happypack")]),a._v(" 实现多线程加速编译")]),a._v(" "),t("li",[a._v("使用"),t("code",[a._v("webpack-uglify-parallel")]),a._v("来提升"),t("code",[a._v("uglifyPlugin")]),a._v("的压缩速度。 原理上"),t("code",[a._v("webpack-uglify-parallel")]),a._v("采用了多核并行压缩来提升压缩速度")]),a._v(" "),t("li",[a._v("使用"),t("code",[a._v("Tree-shaking")]),a._v("和"),t("code",[a._v("Scope Hoisting")]),a._v("来剔除多余代码")])]),a._v(" "),t("hr"),a._v(" "),t("h4",{attrs:{id:"_11-怎么配置单页应用-怎么配置多页应用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_11-怎么配置单页应用-怎么配置多页应用"}},[a._v("#")]),a._v(" 11. 怎么配置单页应用？怎么配置多页应用？")]),a._v(" "),t("ul",[t("li",[t("p",[a._v("单页应用可以理解为 webpack 的标准模式，直接在"),t("code",[a._v("entry")]),a._v("中指定单页应用的入口即可，这里不再赘述")])]),a._v(" "),t("li",[t("p",[a._v("多页应用的话，可以使用 webpack 的 "),t("code",[a._v("AutoWebPlugin")]),a._v("来完成简单自动化的构建，但是前提是项目的目录结构必须遵守他预设的规范。 多页应用中要注意的是：")]),a._v(" "),t("ul",[t("li",[a._v("每个页面都有公共的代码，可以将这些代码抽离出来，避免重复的加载。比如，每个页面都引用了同一套 css 样式表")]),a._v(" "),t("li",[a._v("随着业务的不断扩展，页面可能会不断的追加，所以一定要让入口的配置足够灵活，避免每次添加新页面还需要修改构建配置")])])])]),a._v(" "),t("hr"),a._v(" "),t("h4",{attrs:{id:"_12-npm-打包时需要注意哪些-如何利用-webpack-来更好的构建"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_12-npm-打包时需要注意哪些-如何利用-webpack-来更好的构建"}},[a._v("#")]),a._v(" 12. npm 打包时需要注意哪些？如何利用 webpack 来更好的构建？")]),a._v(" "),t("ul",[t("li",[t("code",[a._v("Npm")]),a._v("是目前最大的 JavaScript 模块仓库，里面有来自全世界开发者上传的可复用模块。你可能只是 JS 模块的使用者，但是有些情况你也会去选择上传自己开发的模块。 关于 NPM 模块上传的方法可以去"),t("a",{attrs:{href:"https://docs.npmjs.com/",target:"_blank",rel:"noopener noreferrer"}},[a._v("官网"),t("OutboundLink")],1),a._v("上进行学习，这里只讲解如何利用 webpack 来构建。")]),a._v(" "),t("li",[a._v("NPM 模块需要注意以下问题：")])]),a._v(" "),t("ol",[t("li",[a._v("要支持 CommonJS 模块化规范，所以要求打包后的最后结果也遵守该规则。")]),a._v(" "),t("li",[a._v("Npm 模块使用者的环境是不确定的，很有可能并不支持 ES6，所以打包的最后结果应该是采用 ES5 编写的。并且如果 ES5 是经过转换的，请最好连同 SourceMap 一同上传。")]),a._v(" "),t("li",[a._v("Npm 包大小应该是尽量小（有些仓库会限制包大小）")]),a._v(" "),t("li",[a._v("发布的模块不能将依赖的模块也一同打包，应该让用户选择性的去自行安装。这样可以避免模块应用者再次打包时出现底层模块被重复打包的情况。")]),a._v(" "),t("li",[a._v("UI 组件类的模块应该将依赖的其它资源文件，例如"),t("code",[a._v(".css")]),a._v("文件也需要包含在发布的模块里。")])]),a._v(" "),t("ul",[t("li",[a._v("基于以上需要注意的问题，我们可以对于 webpack 配置做以下扩展和优化：")])]),a._v(" "),t("ol",[t("li",[a._v("CommonJS 模块化规范的解决方案： 设置"),t("code",[a._v("output.libraryTarget='commonjs2'")]),a._v("使输出的代码符合 CommonJS2 模块化规范，以供给其它模块导入使用")]),a._v(" "),t("li",[a._v("输出 ES5 代码的解决方案：使用"),t("code",[a._v("babel-loader")]),a._v("把 ES6 代码转换成 ES5 的代码。再通过开启"),t("code",[a._v("devtool: 'source-map'")]),a._v("输出 SourceMap 以发布调试。")]),a._v(" "),t("li",[a._v("Npm 包大小尽量小的解决方案：Babel 在把 ES6 代码转换成 ES5 代码时会注入一些辅助函数，最终导致每个输出的文件中都包含这段辅助函数的代码，造成了代码的冗余。解决方法是修改"),t("code",[a._v(".babelrc")]),a._v("文件，为其加入"),t("code",[a._v("transform-runtime")]),a._v("插件")]),a._v(" "),t("li",[a._v("不能将依赖模块打包到 NPM 模块中的解决方案：使用"),t("code",[a._v("externals")]),a._v("配置项来告诉 webpack 哪些模块不需要打包。")]),a._v(" "),t("li",[a._v("对于依赖的资源文件打包的解决方案：通过"),t("code",[a._v("css-loader")]),a._v("和"),t("code",[a._v("extract-text-webpack-plugin")]),a._v("来实现，配置如下：")])]),a._v(" "),t("div",{staticClass:"language-js extra-class"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("const")]),a._v(" ExtractTextPlugin "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("require")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v("'extract-text-webpack-plugin'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\nmodule"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("exports "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n  module"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    rules"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("\n      "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 增加对 CSS 文件的支持")]),a._v("\n        test"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token regex"}},[a._v("/\\.css/")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 提取出 Chunk 中的 CSS 代码到单独的文件中")]),a._v("\n        use"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" ExtractTextPlugin"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("extract")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n          use"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v("'css-loader'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("\n      "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("\n  plugins"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("ExtractTextPlugin")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n      "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 输出的 CSS 文件名称")]),a._v("\n      filename"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v("'index.css'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),t("hr"),a._v(" "),t("h4",{attrs:{id:"_13-如何在-vue-项目中实现按需加载"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_13-如何在-vue-项目中实现按需加载"}},[a._v("#")]),a._v(" 13. 如何在 vue 项目中实现按需加载？")]),a._v(" "),t("ul",[t("li",[t("strong",[a._v("Vue UI 组件库的按需加载")]),a._v("为了快速开发前端项目，经常会引入现成的 UI 组件库如 ElementUI、iView 等，但是他们的体积和他们所提供的功能一样，是很庞大的。 而通常情况下，我们仅仅需要少量的几个组件就足够了，但是我们却将庞大的组件库打包到我们的源码中，造成了不必要的开销。")]),a._v(" "),t("li",[a._v("不过很多组件库已经提供了现成的解决方案，如 Element 出品的"),t("code",[a._v("babel-plugin-component")]),a._v("和 AntDesign 出品的"),t("code",[a._v("babel-plugin-import")]),a._v(" 安装以上插件后，在"),t("code",[a._v(".babelrc")]),a._v("配置中或"),t("code",[a._v("babel-loader")]),a._v("的参数中进行设置，即可实现组件按需加载了。")])]),a._v(" "),t("div",{staticClass:"language-json extra-class"},[t("pre",{pre:!0,attrs:{class:"language-json"}},[t("code",[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n  "),t("span",{pre:!0,attrs:{class:"token property"}},[a._v('"presets"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"es2015"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),t("span",{pre:!0,attrs:{class:"token property"}},[a._v('"modules"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[a._v("false")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("\n  "),t("span",{pre:!0,attrs:{class:"token property"}},[a._v('"plugins"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("\n      "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"component"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("\n      "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token property"}},[a._v('"libraryName"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"element-ui"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token property"}},[a._v('"styleLibraryName"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"theme-chalk"')]),a._v("\n      "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),t("ul",[t("li",[t("p",[t("strong",[a._v("单页应用的按需加载")]),a._v(" 现在很多前端项目都是通过单页应用的方式开发的，但是随着业务的不断扩展，会面临一个严峻的问题——首次加载的代码量会越来越多，影响用户的体验。")])]),a._v(" "),t("li",[t("p",[a._v("通过"),t("code",[a._v("import(*)")]),a._v("语句来控制加载时机，webpack 内置了对于"),t("code",[a._v("import(*)")]),a._v("的解析，会将"),t("code",[a._v("import(*)")]),a._v("中引入的模块作为一个新的入口在生成一个 chunk。 当代码执行到"),t("code",[a._v("import(*)")]),a._v("语句时，会去加载 Chunk 对应生成的文件。"),t("code",[a._v("import()")]),a._v("会返回一个 Promise 对象，所以为了让浏览器支持，需要事先注入"),t("code",[a._v("Promise polyfill")])])])]),a._v(" "),t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"custom-block-title"},[a._v("参考文章")]),a._v(" "),t("p",[t("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/44438844",target:"_blank",rel:"noopener noreferrer"}},[a._v("关于 webpack 的面试题总结"),t("OutboundLink")],1)])])])}),[],!1,null,null,null);e.default=r.exports}}]);